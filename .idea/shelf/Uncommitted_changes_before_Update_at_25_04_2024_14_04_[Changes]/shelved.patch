Index: user/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.models import AbstractBaseUser, BaseUserManager\r\nfrom django.db import models\r\n\r\nclass UserManager(BaseUserManager):\r\n    def create_user(self, phone_number, first_name, last_name, email, password=None):\r\n        if not phone_number:\r\n            raise ValueError('Users must have a phone number')\r\n        user = self.model(\r\n            phone_number=phone_number,\r\n            first_name=first_name,\r\n            last_name=last_name,\r\n            email=email,\r\n        )\r\n        user.set_password(password)\r\n        user.save(using=self._db)\r\n        return user\r\n\r\n    def create_superuser(self, phone_number, first_name, last_name, email=None, password=None):\r\n        user = self.create_user(phone_number, first_name, last_name, email, password)\r\n        user.is_staff = True\r\n        user.is_superuser = True\r\n        user.save(using=self._db)\r\n        return user\r\n\r\nclass User(AbstractBaseUser):\r\n    phone_number = models.CharField(max_length=15, unique=True)\r\n    first_name = models.CharField(max_length=30)\r\n    last_name = models.CharField(max_length=30)\r\n    email = models.EmailField(blank=True, null=True)\r\n    password = models.CharField(max_length=128)\r\n    is_active = models.BooleanField(default=True)\r\n    is_staff = models.BooleanField(default=False)\r\n    is_superuser = models.BooleanField(default=False)\r\n    is_verified = models.BooleanField(default=False)\r\n\r\n    USERNAME_FIELD = \"phone_number\"\r\n    REQUIRED_FIELDS = ['first_name', 'last_name']\r\n\r\n    objects = UserManager()\r\n\r\n    def __str__(self):\r\n        return self.phone_number\r\n\r\n    def has_perm(self, perm, obj=None):\r\n        return self.is_staff\r\n\r\n    def has_module_perms(self, app_label):\r\n        return self.is_staff\r\n\r\n    class Meta:\r\n        verbose_name = 'user'\r\n        verbose_name_plural = 'users'\r\n\r\nclass UserVerification(models.Model):\r\n    email = models.EmailField(unique=True)\r\n    verification_code = models.CharField(max_length=6)\r\n    verified = models.BooleanField(default=False)\r\n    phone_verification_code = models.CharField(max_length=6)\r\n    phone_verified = models.BooleanField(default=False)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/models.py b/user/models.py
--- a/user/models.py	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
+++ b/user/models.py	(date 1714005287008)
@@ -1,4 +1,4 @@
-from django.contrib.auth.models import AbstractBaseUser, BaseUserManager
+from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, User
 from django.db import models
 
 class UserManager(BaseUserManager):
@@ -55,5 +55,13 @@
     email = models.EmailField(unique=True)
     verification_code = models.CharField(max_length=6)
     verified = models.BooleanField(default=False)
+    phone_number = models.CharField(max_length=15, unique=True)
     phone_verification_code = models.CharField(max_length=6)
     phone_verified = models.BooleanField(default=False)
+
+class UserVerificationLogin(models.Model):
+    user = models.ForeignKey(User, on_delete=models.CASCADE)
+    phone_number = models.CharField(max_length=15, unique=True)  # Assuming unique phone numbers
+    email = models.EmailField(unique=True)  # Assuming unique emails
+    phone_verified = models.BooleanField(default=False)
+    email_verified = models.BooleanField(default=False)
\ No newline at end of file
Index: user/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import logging\r\nimport os\r\nfrom django.conf import settings\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom .serializers import *\r\nimport random\r\nfrom django.core.mail import send_mail\r\nfrom twilio.rest import Client\r\nfrom django.utils.crypto import get_random_string\r\nfrom .models import UserVerification, User, UserManager\r\n\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\n\r\n\r\n\r\nclass RegisterUserView(APIView):\r\n    def post(self, request):\r\n        serializer = RegisterUserSerializer(data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        user = serializer.save()\r\n        account_sid = os.getenv(\"ACCOUNT_SID\")\r\n        auth_token = os.getenv(\"AUTH_TOKEN\")\r\n        client = Client(account_sid, auth_token)\r\n\r\n        verification_service_sid = os.getenv(\"VERIFICATION_SERVICE_SID\")\r\n        verification = client.verify \\\r\n                             .services(verification_service_sid) \\\r\n                             .verifications \\\r\n                             .create(to=user.phone_number, channel='sms')\r\n\r\n        if verification.status == 'pending':\r\n            return Response({'message': 'Verification code sent to your phone number.'}, status=status.HTTP_201_CREATED)\r\n        else:\r\n            return Response({'message': 'Failed to send verification code.'}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n\r\n\r\nclass VerifyUserView(APIView):\r\n    def post(self, request):\r\n        phone_number = request.data.get('phone_number')\r\n        verification_code = request.data.get('verification_code')\r\n\r\n        if not phone_number or not verification_code:\r\n            return Response({'message': 'Telefon raqami yoki tasdiqlash kodini kiritish talab qilinadi'}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n        verification_service_sid = os.getenv(\"VERIFICATION_SERVICE_SID\")\r\n        account_sid = os.getenv(\"ACCOUNT_SID\")\r\n        auth_token = os.getenv(\"AUTH_TOKEN\")\r\n        client = Client(account_sid, auth_token)\r\n\r\n        try:\r\n            verification_check = client.verify \\\r\n                                       .services(verification_service_sid) \\\r\n                                       .verification_checks \\\r\n                                       .create(to=phone_number, code=verification_code)\r\n            if verification_check.status == 'approved':\r\n                return Response({'message': \"Tasdiqlash muvaffaqiyatli Amalga Oshirildi\"}, status=status.HTTP_200_OK)\r\n            else:\r\n                return Response({'message': \"Noto'g'ri tasdiqlash kod\"}, status=status.HTTP_400_BAD_REQUEST)\r\n        except Exception as e:\r\n            return Response({'message': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\n\r\n\r\nclass SendVerificationCodeView(APIView):\r\n    def post(self, request):\r\n        serializer = UserVerificationSerializer(data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n\r\n        email = serializer.validated_data[\"email\"]\r\n\r\n        # Generate verification code\r\n        verification_code = str(random.randint(100000, 999999))\r\n\r\n        # Send verification code using SMTP\r\n        subject = \"Verification Code\"\r\n        message = f\"Your verification code is: {verification_code}\"\r\n        send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [email])\r\n\r\n        if send_mail:  # Check if mail was sent successfully (not foolproof)\r\n            # Save verification code to database if sending was successful\r\n            user_verification, created = UserVerification.objects.get_or_create(email=email)\r\n            user_verification.verification_code = verification_code\r\n            user_verification.save()\r\n\r\n            return Response({\"message\": \"Verification code sent successfully.\"}, status=status.HTTP_200_OK)\r\n        else:\r\n            return Response({\"message\": \"Failed to send verification code.\"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n\r\n\r\n\r\nclass VerifyVerificationCodeView(APIView):\r\n    def post(self, request):\r\n        email = request.data.get(\"email\")\r\n        verification_code = request.data.get(\"verification_code\")\r\n\r\n        if not email or not verification_code:\r\n            return Response({\"message\": \"Email va tasdiqlash kodi kiritishingiz shart.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n        try:\r\n            user_verification = UserVerification.objects.get(email=email, verification_code=verification_code)\r\n            if not user_verification.verified:\r\n                user_verification.verified = True\r\n                user_verification.save()\r\n                return Response({\"message\": \"Verification successful.\"}, status=status.HTTP_200_OK)\r\n            else:\r\n                return Response({\"message\": \"Email has already been verified.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n        except UserVerification.DoesNotExist:\r\n            return Response({\"message\": \"Invalid verification code.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\nclass PasswordResetRequestView(APIView):\r\n    def post(self, request, *args, **kwargs):\r\n        email = request.data.get('email')\r\n        if not email:\r\n            return Response({'message': \"Email manzilini kiritishingiz kerak.\"}, status=status.HTTP_400_BAD_REQUEST)\r\n        try:\r\n            user = User.objects.get(email=email)\r\n        except User.DoesNotExist:\r\n            return Response({'message': \"Foydalanuvchi topilmadi\"}, status=status.HTTP_404_NOT_FOUND)\r\n        new_password = get_random_string(10)\r\n        send_mail(\r\n            \"Parolni tiklash\",\r\n            f\"Sizning yangi parolingiz: {new_password}\",\r\n            \"4dm1n217@gmail.com.com\",\r\n            [email],\r\n            fail_silently=False,\r\n        )\r\n        user.set_password(new_password)\r\n        user.save()\r\n        return Response({'message': \"Yangi parol emailga yuborildi\"}, status=status.HTTP_200_OK)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/views.py b/user/views.py
--- a/user/views.py	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
+++ b/user/views.py	(date 1714079064686)
@@ -1,5 +1,6 @@
 import logging
 import os
+from django.contrib.auth import authenticate, login
 from django.conf import settings
 from rest_framework.views import APIView
 from rest_framework.response import Response
@@ -9,7 +10,7 @@
 from django.core.mail import send_mail
 from twilio.rest import Client
 from django.utils.crypto import get_random_string
-from .models import UserVerification, User, UserManager
+from .models import UserVerification, User
 
 
 logger = logging.getLogger(__name__)
@@ -82,8 +83,7 @@
         message = f"Your verification code is: {verification_code}"
         send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [email])
 
-        if send_mail:  # Check if mail was sent successfully (not foolproof)
-            # Save verification code to database if sending was successful
+        if send_mail:
             user_verification, created = UserVerification.objects.get_or_create(email=email)
             user_verification.verification_code = verification_code
             user_verification.save()
@@ -132,4 +132,52 @@
         )
         user.set_password(new_password)
         user.save()
-        return Response({'message': "Yangi parol emailga yuborildi"}, status=status.HTTP_200_OK)
\ No newline at end of file
+        return Response({'message': "Yangi parol emailga yuborildi"}, status=status.HTTP_200_OK)
+
+
+class LoginView(APIView):
+    def post(self, request):
+        serializer = UserVerificationLoginSerializer(data=request.data)
+        serializer.is_valid(raise_exception=True)
+
+        phone_number = request.data.get('phone_number')
+        email = request.data.get('email')
+
+        # Check if user exists (optional, based on your use case)
+        try:
+            user = User.objects.get(email=email)  # Assuming email is used for login
+        except User.DoesNotExist:
+            return Response({"message": "Foydalanuvchi Topilmadi"}, status=status.HTTP_404_NOT_FOUND)
+
+        # Generate verification codes
+        phone_verification_code = str(random.randint(100000, 999999))
+        email_verification_code = str(random.randint(100000, 999999))
+
+        # Save or update verification codes
+        user_verification, created = UserVerification.objects.get_or_create(user=user)
+        user_verification.phone_number = phone_number  # Update phone number if not provided earlier
+        user_verification.phone_verification_code = phone_verification_code
+        user_verification.email_verification_code = email_verification_code
+        user_verification.save()
+
+        # Send verification codes (Phone and Email)
+        account_sid = 'your_twilio_account_sid'
+        auth_token = 'your_twilio_auth_token'
+        client = Client(account_sid, auth_token)
+        if phone_number:  # Send SMS if phone number provided
+            client.messages.create(
+                 to=phone_number,
+                 from_='your_twilio_phone_number',
+                 body=f"Your phone verification code is: {phone_verification_code}"
+            )
+
+        if email:  # Send email if email provided
+            subject = "Email Verification Code"
+            message = f"Your email verification code is: {email_verification_code}"
+            send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [email])
+
+        return Response({"message": "Verification codes sent."}, status=status.HTTP_200_OK)
+
+
+
+
Index: user/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\nfrom .models import *\r\nfrom twilio.rest import Client\r\nimport os\r\n\r\nclass RegisterUserSerializer(serializers.ModelSerializer):\r\n    password = serializers.CharField(write_only=True)\r\n    confirm_password = serializers.CharField(write_only=True)\r\n\r\n    class Meta:\r\n        model = User  # Update with your model name\r\n        fields = ['first_name', 'last_name', 'phone_number', 'email', 'password', 'confirm_password']\r\n\r\n    def create(self, validated_data):\r\n        user = User.objects.create_user(\r\n            first_name=validated_data['first_name'],\r\n            last_name=validated_data['last_name'],\r\n            phone_number=validated_data['phone_number'],\r\n            email=validated_data.get('email'),  # Optional\r\n            password=validated_data['password'],\r\n        )\r\n        user.is_verified = False  # Set verification flag to False initially\r\n        user.save()\r\n        # Send verification code using Twilio Verify (refer to Twilio documentation)\r\n        return user\r\n\r\nclass ConfirmationCodeSerializer(serializers.Serializer):\r\n    phone_number = serializers.CharField(max_length=20)\r\n    code = serializers.CharField(max_length=6)\r\n\r\n\r\n\r\nclass TwilioVerificationService:\r\n    def __init__(self):\r\n        self.client = Client(os.getenv(\"ACCOUNT_SID\"), os.getenv(\"AUTH_TOKEN\"))\r\n\r\nclass UserVerificationSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = UserVerification\r\n        fields = ['email']\r\nclass PasswordResetRequestSerializer(serializers.Serializer):\r\n    email = serializers.EmailField()\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/serializers.py b/user/serializers.py
--- a/user/serializers.py	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
+++ b/user/serializers.py	(date 1714005347096)
@@ -37,8 +37,23 @@
 class UserVerificationSerializer(serializers.ModelSerializer):
     class Meta:
         model = UserVerification
-        fields = ['email']
+        fields = ["email"]
+class UserSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = User
+        fields = ("phone_number")
+
+class UserPhoneVerificationSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = UserVerification
+        fields = ("phone_verification_code")
 class PasswordResetRequestSerializer(serializers.Serializer):
     email = serializers.EmailField()
 
 
+class UserVerificationLoginSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = UserVerification
+        fields = ("phone_verification_code", "email_verification_code")
+
+
Index: user/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/migrations/0001_initial.py b/user/migrations/0001_initial.py
deleted file mode 100644
--- a/user/migrations/0001_initial.py	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
+++ /dev/null	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
@@ -1,45 +0,0 @@
-# Generated by Django 5.0.4 on 2024-04-21 20:34
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='User',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
-                ('phone_number', models.CharField(max_length=15, unique=True)),
-                ('first_name', models.CharField(max_length=30)),
-                ('last_name', models.CharField(max_length=30)),
-                ('email', models.EmailField(blank=True, max_length=254, null=True)),
-                ('password', models.CharField(max_length=128)),
-                ('is_active', models.BooleanField(default=True)),
-                ('is_staff', models.BooleanField(default=False)),
-                ('is_superuser', models.BooleanField(default=False)),
-                ('is_verified', models.BooleanField(default=False)),
-            ],
-            options={
-                'verbose_name': 'user',
-                'verbose_name_plural': 'users',
-            },
-        ),
-        migrations.CreateModel(
-            name='UserVerification',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('email', models.EmailField(max_length=254, unique=True)),
-                ('verification_code', models.CharField(max_length=6)),
-                ('verified', models.BooleanField(default=False)),
-                ('phone_verification_code', models.CharField(max_length=6)),
-                ('phone_verified', models.BooleanField(default=False)),
-            ],
-        ),
-    ]
Index: payments/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/payments/migrations/0001_initial.py b/payments/migrations/0001_initial.py
deleted file mode 100644
--- a/payments/migrations/0001_initial.py	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
+++ /dev/null	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
@@ -1,34 +0,0 @@
-# Generated by Django 5.0.4 on 2024-04-21 20:34
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='Evakuator',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('carModel', models.CharField(max_length=50)),
-                ('eventName', models.CharField(max_length=150)),
-                ('location', models.CharField(max_length=150)),
-                ('eventDate', models.DateField()),
-            ],
-        ),
-        migrations.CreateModel(
-            name='Mechanic',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('eventName', models.CharField(max_length=250)),
-                ('carModel', models.CharField(max_length=50)),
-                ('location', models.CharField(max_length=150)),
-                ('eventDate', models.DateField()),
-            ],
-        ),
-    ]
Index: addCar/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/addCar/migrations/0001_initial.py b/addCar/migrations/0001_initial.py
deleted file mode 100644
--- a/addCar/migrations/0001_initial.py	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
+++ /dev/null	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
@@ -1,40 +0,0 @@
-# Generated by Django 5.0.4 on 2024-04-21 20:34
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='Car',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('userName', models.CharField(max_length=150)),
-                ('email', models.EmailField(max_length=254)),
-                ('carNamber', models.CharField(max_length=10)),
-                ('texSeries', models.CharField(max_length=10)),
-                ('texNum', models.CharField(max_length=10)),
-                ('avtoMark', models.CharField(max_length=20)),
-                ('avtoName', models.CharField(max_length=20)),
-                ('avtoYear', models.IntegerField()),
-                ('avtoEngine', models.CharField(max_length=50)),
-                ('avtoColor', models.CharField(max_length=50)),
-                ('docNumber', models.IntegerField()),
-                ('docDate', models.DateField()),
-                ('politicalNum', models.CharField(max_length=150)),
-                ('dateStart', models.DateField()),
-                ('dateEnd', models.DateField()),
-                ('avtoBuyDate', models.DateField()),
-                ('avtoPrice', models.CharField(max_length=150)),
-                ('avtoCusov', models.CharField(max_length=150)),
-                ('transmission', models.CharField(max_length=150)),
-                ('vinCode', models.CharField(blank=True, max_length=8, null=True, unique=True)),
-            ],
-        ),
-    ]
Index: backend/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/migrations/0001_initial.py b/backend/migrations/0001_initial.py
deleted file mode 100644
--- a/backend/migrations/0001_initial.py	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
+++ /dev/null	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
@@ -1,84 +0,0 @@
-# Generated by Django 5.0.4 on 2024-04-21 20:34
-
-import django.db.models.deletion
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='addresses',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('title', models.CharField(max_length=150)),
-                ('address', models.CharField(max_length=250)),
-                ('location', models.CharField(max_length=250)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='JarimaBandi',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('title', models.CharField(max_length=150)),
-                ('description', models.TextField(blank=True)),
-                ('price_main', models.CharField(max_length=50)),
-                ('price_sale30', models.CharField(max_length=50)),
-                ('price_sale50', models.CharField(max_length=50)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='JarimaToifasi',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('name1', models.CharField(max_length=250, unique=True)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='TexService',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('email', models.EmailField(max_length=254)),
-                ('phone', models.CharField(max_length=50)),
-                ('text', models.TextField()),
-            ],
-        ),
-        migrations.CreateModel(
-            name='YHQQoidalar',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('title', models.CharField(max_length=300)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='Jarima',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('name2', models.TextField()),
-                ('band', models.ManyToManyField(to='backend.jarimabandi')),
-                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.jarimatoifasi')),
-            ],
-        ),
-        migrations.CreateModel(
-            name='YHQQoidalarCategory',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('name', models.CharField(max_length=300)),
-                ('YHQQoidalar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.yhqqoidalar')),
-            ],
-        ),
-        migrations.CreateModel(
-            name='YHQQoida',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('text', models.TextField()),
-                ('img', models.ImageField(blank=True, null=True, upload_to='belgilar/photos')),
-                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.yhqqoidalarcategory')),
-            ],
-        ),
-    ]
Index: backend/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom .models import *\r\n\r\nadmin.site.register([JarimaBook, JarimaBookCategory])\r\nadmin.site.register([YHQQoidalarBook, YHQQoidlarCategory]),\r\nadmin.site.register(ServiceAddres),\r\nadmin.site.register(TexServiceOrder),\r\nadmin.site.register([Gas, CarOil]),\r\nadmin.site.register(Affidavit)\r\nadmin.site.register(TexServiceMessage)\r\nadmin.site.register(RestoreLicense)\r\nadmin.site.register(AutoTest)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/admin.py b/backend/admin.py
--- a/backend/admin.py	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
+++ b/backend/admin.py	(date 1713998924951)
@@ -1,7 +1,6 @@
 from django.contrib import admin
 from .models import *
 
-admin.site.register([JarimaBook, JarimaBookCategory])
 admin.site.register([YHQQoidalarBook, YHQQoidlarCategory]),
 admin.site.register(ServiceAddres),
 admin.site.register(TexServiceOrder),
Index: user/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\r\nfrom .views import RegisterUserView, VerifyUserView, SendVerificationCodeView, VerifyVerificationCodeView, PasswordResetRequestView\r\n\r\nurlpatterns = [\r\n    path('register/', RegisterUserView.as_view(), name='register'),\r\n    path('confirm-code/', VerifyUserView.as_view(), name='confirm-code'),\r\n    path('send-verification-email/', SendVerificationCodeView.as_view(), name='send-verification-email'),\r\n    path('verify-email/', VerifyVerificationCodeView.as_view(), name='verify-email'),\r\n    path('password_reset/', PasswordResetRequestView.as_view(), name='password_reset_request'),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/urls.py b/user/urls.py
--- a/user/urls.py	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
+++ b/user/urls.py	(date 1713985655755)
@@ -1,5 +1,5 @@
 from django.urls import path
-from .views import RegisterUserView, VerifyUserView, SendVerificationCodeView, VerifyVerificationCodeView, PasswordResetRequestView
+from .views import *
 
 urlpatterns = [
     path('register/', RegisterUserView.as_view(), name='register'),
@@ -7,4 +7,6 @@
     path('send-verification-email/', SendVerificationCodeView.as_view(), name='send-verification-email'),
     path('verify-email/', VerifyVerificationCodeView.as_view(), name='verify-email'),
     path('password_reset/', PasswordResetRequestView.as_view(), name='password_reset_request'),
+    path('login/', LoginView.as_view(), name='login'),
+    path('verify-code/', VerifyCodeView.as_view(), name='verify-code'),
 ]
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"f97241d2-ccd4-4c43-a84f-31f763036b54\" name=\"Changes\" comment=\"Fixed\">\r\n      <change beforePath=\"$PROJECT_DIR$/config/settings.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/config/settings.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/user/views.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/user/views.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_AUTO_UPDATE\" value=\"true\" />\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;adm1ngit&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/adm1ngit/MyWay_Backend.git&quot;,\r\n    &quot;accountId&quot;: &quot;26e1552f-cc52-483f-bb2b-d205abd570df&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2f6weUXMrVvL882rqwe1dz7SrE2\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenDjangoStructureViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.pycharm.django.structure.promotion.once.per.project&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/adminPC/Documents/GitHub/MyWay_Backend&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\adminPC\\Documents\\GitHub\\MyWay_Backend\" />\r\n      <recent name=\"C:\\Users\\adminPC\\Documents\\GitHub\\MyWay_Backend\\templates\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-74d2a5396914-JavaScript-PY-241.14494.241\" />\r\n        <option value=\"bundled-python-sdk-0509580d9d50-28c9f5db9ffe-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-241.14494.241\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"f97241d2-ccd4-4c43-a84f-31f763036b54\" name=\"Changes\" comment=\"\" />\r\n      <created>1713134931798</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1713134931798</updated>\r\n      <workItem from=\"1713134934387\" duration=\"247000\" />\r\n      <workItem from=\"1713135195226\" duration=\"7311000\" />\r\n      <workItem from=\"1713145514407\" duration=\"1836000\" />\r\n      <workItem from=\"1713205603353\" duration=\"8434000\" />\r\n      <workItem from=\"1713234271384\" duration=\"55000\" />\r\n      <workItem from=\"1713234328135\" duration=\"49000\" />\r\n      <workItem from=\"1713235382536\" duration=\"2890000\" />\r\n      <workItem from=\"1713242336572\" duration=\"124000\" />\r\n      <workItem from=\"1713252489964\" duration=\"654000\" />\r\n      <workItem from=\"1713301529444\" duration=\"509000\" />\r\n      <workItem from=\"1713318689162\" duration=\"3384000\" />\r\n      <workItem from=\"1713330856860\" duration=\"1082000\" />\r\n      <workItem from=\"1713343532437\" duration=\"482000\" />\r\n      <workItem from=\"1713375688551\" duration=\"2566000\" />\r\n      <workItem from=\"1713378292518\" duration=\"2454000\" />\r\n      <workItem from=\"1713390783191\" duration=\"8480000\" />\r\n      <workItem from=\"1713483231076\" duration=\"7160000\" />\r\n      <workItem from=\"1713548305613\" duration=\"10552000\" />\r\n      <workItem from=\"1713636920535\" duration=\"12798000\" />\r\n      <workItem from=\"1713678085445\" duration=\"1005000\" />\r\n      <workItem from=\"1713723276237\" duration=\"6030000\" />\r\n      <workItem from=\"1713744270315\" duration=\"364000\" />\r\n      <workItem from=\"1713767521551\" duration=\"1696000\" />\r\n      <workItem from=\"1713808049356\" duration=\"5958000\" />\r\n      <workItem from=\"1713830184099\" duration=\"1549000\" />\r\n      <workItem from=\"1713894376127\" duration=\"5175000\" />\r\n      <workItem from=\"1713928666291\" duration=\"1222000\" />\r\n      <workItem from=\"1713983257609\" duration=\"563000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713135698138</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713135698138</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Fixed All\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713145890694</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713145890694</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713233186829</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713233186829</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Fixed All\" />\r\n    <MESSAGE value=\"Fixed\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Fixed\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b1fd7b357776f6b4d54a344828143dc2cf9a0f17)
+++ b/.idea/workspace.xml	(date 1714078792853)
@@ -4,8 +4,21 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="f97241d2-ccd4-4c43-a84f-31f763036b54" name="Changes" comment="Fixed">
-      <change beforePath="$PROJECT_DIR$/config/settings.py" beforeDir="false" afterPath="$PROJECT_DIR$/config/settings.py" afterDir="false" />
+    <list default="true" id="f97241d2-ccd4-4c43-a84f-31f763036b54" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/addCar/migrations/0001_initial.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/addCar/migrations/__init__.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/admin.py" beforeDir="false" afterPath="$PROJECT_DIR$/backend/admin.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/migrations/0001_initial.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/migrations/__init__.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/payments/migrations/0001_initial.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/payments/migrations/__init__.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/sqlite3.db" beforeDir="false" afterPath="$PROJECT_DIR$/sqlite3.db" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/user/migrations/0001_initial.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/user/migrations/__init__.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/user/models.py" beforeDir="false" afterPath="$PROJECT_DIR$/user/models.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/user/serializers.py" beforeDir="false" afterPath="$PROJECT_DIR$/user/serializers.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/user/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/user/urls.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/user/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/user/views.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -52,7 +65,6 @@
     &quot;RunOnceActivity.OpenDjangoStructureViewOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.pycharm.django.structure.promotion.once.per.project&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
     &quot;git-widget-placeholder&quot;: &quot;main&quot;,
     &quot;last_opened_file_path&quot;: &quot;C:/Users/adminPC/Documents/GitHub/MyWay_Backend&quot;,
     &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
@@ -112,7 +124,8 @@
       <workItem from="1713830184099" duration="1549000" />
       <workItem from="1713894376127" duration="5175000" />
       <workItem from="1713928666291" duration="1222000" />
-      <workItem from="1713983257609" duration="563000" />
+      <workItem from="1713983257609" duration="8530000" />
+      <workItem from="1714067889911" duration="1125000" />
     </task>
     <task id="LOCAL-00001" summary="Fixed">
       <option name="closed" value="true" />
diff --git a/addCar/migrations/__init__.py b/addCar/migrations/__init__.py
deleted file mode 100644
diff --git a/backend/migrations/__init__.py b/backend/migrations/__init__.py
deleted file mode 100644
diff --git a/payments/migrations/__init__.py b/payments/migrations/__init__.py
deleted file mode 100644
diff --git a/user/migrations/__init__.py b/user/migrations/__init__.py
deleted file mode 100644
